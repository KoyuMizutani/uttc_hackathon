{"ast":null,"code":"var _jsxFileName = \"/Users/iszkrit/UTTC/hackathon/web/src/components/Thread.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Thread = props => {\n  _s();\n\n  const [messages, setMessages] = useState([]);\n  const [newMessage, setNewMessage] = useState(\"\"); // const [messageEdited, setMessageEdited] = useState(\"\")\n  // const [indexEdited, setIndexEdited] = useState(-1)\n  // const isEdited = indexEdited !== -1\n\n  useEffect(() => {\n    axios.get('http://localhost:8080/message').then(res => {\n      setMessages(res.data);\n      console.log(res.data);\n    });\n  }, []);\n\n  const submitHandle = e => {\n    if (newMessage !== \"\") {\n      const data = {\n        message: newMessage,\n        sender: props.user.accountId\n      };\n      axios.post('http://localhost:8080/message', data).then(response => {\n        console.log('response body:', response.data);\n      });\n      setNewMessage(\"\");\n      e.preventDefault();\n    } else {\n      e.preventDefault();\n    }\n\n    ;\n  };\n\n  const sendMessage = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: submitHandle,\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"messageEnter\",\n          value: newMessage,\n          placeholder: \"\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u3092\\u8A18\\u5165\",\n          onChange: event => {\n            setNewMessage(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"messagePost\",\n          type: \"submit\",\n          value: \"\\u9001\\u4FE1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }; // const editHandle = (index :number) => {\n  //   setIndexEdited(index) \n  //   setMessageEdited(messages[index])\n  // }\n  // const editMessage = () => {\n  //   const changeHandle = (e :React.FormEvent<HTMLFormElement>) => {\n  //     messages[indexEdited] = messageEdited\n  //     setMessages(messages) \n  //     setMessageEdited(\"\")\n  //     setIndexEdited(-1)\n  //     e.preventDefault()\n  //   }\n  //   return (\n  //     <div className=\"submit\">\n  //       <form onSubmit={changeHandle}>\n  //         <textarea \n  //           className=\"messageEnter\"\n  //           value={messageEdited}\n  //           onChange={(event)=>{setMessageEdited(event.target.value)}}\n  //         />\n  //         <input\n  //           className=\"messagePost\"\n  //           type=\"submit\"\n  //           value=\"編集完了\"\n  //         /> \n  //       </form>\n  //     </div>\n  //   )\n  // }\n  // const deleteHandle = (index :number) => {\n  //   const newMessages = [...messages].filter((message, messageIndex)=>(messageIndex !== index))\n  //   setMessages(newMessages)\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"thread\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: `${message.Sender}：${message.Message}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), sendMessage()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Thread, \"bFuYpZWMfOU2WhBa/CyaGkj6fmk=\");\n\n_c = Thread;\nexport default Thread;\n\nvar _c;\n\n$RefreshReg$(_c, \"Thread\");","map":{"version":3,"names":["React","useState","useEffect","axios","Thread","props","messages","setMessages","newMessage","setNewMessage","get","then","res","data","console","log","submitHandle","e","message","sender","user","accountId","post","response","preventDefault","sendMessage","event","target","value","map","index","Sender","Message"],"sources":["/Users/iszkrit/UTTC/hackathon/web/src/components/Thread.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\ntype User = {\n  accountName:  string\n  accountId:    string \n}\ntype Props = {\n  user: User\n}\n\ntype Message = {\n  Message:    string\n  MessageId:  string\n  Sender:     string\n  Date:       string\n  IsEdited:   boolean\n}\n\nconst Thread = (props: Props) => {\n\n  const [messages, setMessages] = useState([]) \n  const [newMessage, setNewMessage] = useState(\"\")\n  // const [messageEdited, setMessageEdited] = useState(\"\")\n  // const [indexEdited, setIndexEdited] = useState(-1)\n  // const isEdited = indexEdited !== -1\n\n  useEffect(() => {\n    axios.get('http://localhost:8080/message')\n    .then(res => {\n        setMessages(res.data)\n        console.log(res.data)\n    })\n  }, [])\n\n  const submitHandle = (e: React.FormEvent<HTMLFormElement>) => {\n    if (newMessage !== \"\") {\n      const data = {\n        message:  newMessage,\n        sender:   props.user.accountId      \n      };\n      axios.post('http://localhost:8080/message', data)\n      .then(response => {\n      console.log('response body:', response.data);\n      });\n      setNewMessage(\"\")\n      e.preventDefault()\n    }else{\n      e.preventDefault()\n    };\n  }\n\n  const sendMessage = () => {\n    return (\n      <div className=\"submit\">\n        <form onSubmit={submitHandle}>\n          <textarea \n            className=\"messageEnter\"\n            value={newMessage}\n            placeholder=\"メッセージを記入\"\n            onChange={(event)=>{setNewMessage(event.target.value)}}\n          />\n          <input\n            className=\"messagePost\"\n            type=\"submit\"\n            value=\"送信\"\n          /> \n        </form>\n      </div>\n    )\n  }\n\n  // const editHandle = (index :number) => {\n  //   setIndexEdited(index) \n  //   setMessageEdited(messages[index])\n  // }\n\n  // const editMessage = () => {\n  //   const changeHandle = (e :React.FormEvent<HTMLFormElement>) => {\n  //     messages[indexEdited] = messageEdited\n  //     setMessages(messages) \n  //     setMessageEdited(\"\")\n  //     setIndexEdited(-1)\n  //     e.preventDefault()\n\n  //   }\n  //   return (\n  //     <div className=\"submit\">\n  //       <form onSubmit={changeHandle}>\n  //         <textarea \n  //           className=\"messageEnter\"\n  //           value={messageEdited}\n  //           onChange={(event)=>{setMessageEdited(event.target.value)}}\n  //         />\n  //         <input\n  //           className=\"messagePost\"\n  //           type=\"submit\"\n  //           value=\"編集完了\"\n  //         /> \n  //       </form>\n  //     </div>\n  //   )\n  // }\n\n  // const deleteHandle = (index :number) => {\n  //   const newMessages = [...messages].filter((message, messageIndex)=>(messageIndex !== index))\n  //   setMessages(newMessages)\n  // };\n\n  return(\n    <div>\n      <div className=\"thread\">\n        {messages.map((message: Message, index: number)=>(\n          <li key={index}>\n            {`${message.Sender}：${message.Message}`}\n            {/* <span className=\"messageDelete\" onClick={()=>deleteHandle(index)}>×</span>\n            <span className=\"messageEdit\" onClick={()=>editHandle(index)}>編集</span> */}\n          </li>\n        ))}\n          <br />\n      </div>\n      {/* { isEdited ? editMessage() : sendMessage() } */}\n      {sendMessage()}\n    </div>\n  );\n};\n  \nexport default Thread\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAkBA,MAAMC,MAAM,GAAIC,KAAD,IAAkB;EAAA;;EAE/B,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;EACA,MAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C,CAH+B,CAI/B;EACA;EACA;;EAEAC,SAAS,CAAC,MAAM;IACdC,KAAK,CAACO,GAAN,CAAU,+BAAV,EACCC,IADD,CACMC,GAAG,IAAI;MACTL,WAAW,CAACK,GAAG,CAACC,IAAL,CAAX;MACAC,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACC,IAAhB;IACH,CAJD;EAKD,CANQ,EAMN,EANM,CAAT;;EAQA,MAAMG,YAAY,GAAIC,CAAD,IAAyC;IAC5D,IAAIT,UAAU,KAAK,EAAnB,EAAuB;MACrB,MAAMK,IAAI,GAAG;QACXK,OAAO,EAAGV,UADC;QAEXW,MAAM,EAAId,KAAK,CAACe,IAAN,CAAWC;MAFV,CAAb;MAIAlB,KAAK,CAACmB,IAAN,CAAW,+BAAX,EAA4CT,IAA5C,EACCF,IADD,CACMY,QAAQ,IAAI;QAClBT,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BQ,QAAQ,CAACV,IAAvC;MACC,CAHD;MAIAJ,aAAa,CAAC,EAAD,CAAb;MACAQ,CAAC,CAACO,cAAF;IACD,CAXD,MAWK;MACHP,CAAC,CAACO,cAAF;IACD;;IAAA;EACF,CAfD;;EAiBA,MAAMC,WAAW,GAAG,MAAM;IACxB,oBACE;MAAK,SAAS,EAAC,QAAf;MAAA,uBACE;QAAM,QAAQ,EAAET,YAAhB;QAAA,wBACE;UACE,SAAS,EAAC,cADZ;UAEE,KAAK,EAAER,UAFT;UAGE,WAAW,EAAC,kDAHd;UAIE,QAAQ,EAAGkB,KAAD,IAAS;YAACjB,aAAa,CAACiB,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;UAAkC;QAJxD;UAAA;UAAA;UAAA;QAAA,QADF,eAOE;UACE,SAAS,EAAC,aADZ;UAEE,IAAI,EAAC,QAFP;UAGE,KAAK,EAAC;QAHR;UAAA;UAAA;UAAA;QAAA,QAPF;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF;EAiBD,CAlBD,CAjC+B,CAqD/B;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;;;EAEA,oBACE;IAAA,wBACE;MAAK,SAAS,EAAC,QAAf;MAAA,WACGtB,QAAQ,CAACuB,GAAT,CAAa,CAACX,OAAD,EAAmBY,KAAnB,kBACZ;QAAA,UACI,GAAEZ,OAAO,CAACa,MAAO,IAAGb,OAAO,CAACc,OAAQ;MADxC,GAASF,KAAT;QAAA;QAAA;QAAA;MAAA,QADD,CADH,eAQI;QAAA;QAAA;QAAA;MAAA,QARJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,EAYGL,WAAW,EAZd;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAgBD,CA1GD;;GAAMrB,M;;KAAAA,M;AA4GN,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}